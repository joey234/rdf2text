"""
A program that takes the text generated by a neural network and a
relexicalization table to produce text for evaluation.
"""

import argparse

def generate():
    """
    Read options from user input, and final textual output.
    """

    DISCR = 'Perfrom relexicalization on the predictions of DNN.'
    parser = argparse.ArgumentParser(description=DISCR)
    parser.add_argument('-pred', type=str, help='Path to prediction file.',
                required=True)

    parser.add_argument('-relex', help='File to relexicalization table.',
                required=True)

    parser.add_argument('-output', type=str, help='Path to output file for final predictions.',
                    required=True)

    args = parser.parse_args()

    # read from preditions file
    with open(args.pred, encoding="utf8") as predF:
        predictions = predF.readlines()

    # read relex table
    relex_table = []

    with open(args.relex, encoding="utf8") as relexF:
        lines = relexF.readlines()

        for line in lines:
            relex_entities = line.split('\t')

            instance_relex = {}

            for (k, e) in enumerate(relex_entities):
                instance_relex['ENTITY_' + str(k+1)] = e.replace('"', '').replace('\n', ' ')

            relex_table.append(instance_relex)


    # sanity check
    assert len(predictions) == len(relex_table), \
            "Length of prediction file and relex table are not equal."


    #print(relex_table)
    final_predictions = []

    for (pred, relex) in zip(predictions, relex_table):
        predX = pred
        for (id, lex) in relex.items():
            predX = predX.replace(id, lex)

        final_predictions.append(predX)

    assert len(predictions) == len(final_predictions), \
            "Length of prediction file and relex table are not equal."

    with open(args.output, 'a+', encoding="utf8") as opFile:
        opFile.write(''.join(final_predictions))

def main():
    generate()

if __name__ == '__main__':
    main()
